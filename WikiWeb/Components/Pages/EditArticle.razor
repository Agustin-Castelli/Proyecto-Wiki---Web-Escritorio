@page "/edit-article"
@page "/edit-article/{Id:int}"
@rendermode InteractiveServer
@using WikiShared.DTOs.Article
@using WikiShared.Interfaces
@inject IArticleService ArticleService
@inject NavigationManager Nav
@inject HttpClient Http
@inject IJSRuntime JS


<h3>@(Id == 0 ? "Nuevo Artículo" : "Editar Artículo")</h3>

<br/>

<EditForm Model="form" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label><h5>Título:</h5></label>
        <InputText @bind-Value="form.Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label><h5>Contenido:</h5> <p class="text-danger">Si no carga el menú de edición debajo, por favor recargue la página</p></label>
        <InputTextArea @bind-Value="form.Description" id="editor" class="form-control" rows="10" />
    </div>

    <div class="mb-3">
        <label>Creado por:</label>
        <InputText @bind-Value="form.CreatedByUser" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Palabras clave:</label>
        <InputText class="form-control"
        @bind-Value="keywordInput"
        @oninput="OnKeywordInput"
        placeholder="Escribí para buscar..." />

        @if (keywordSuggestions.Any())
        {
            <ul class="list-group mt-1">
                @foreach (var suggestion in keywordSuggestions)
                {
                    <li class="list-group-item list-group-item-action"
                    @onclick="() => AddKeyword(suggestion)">
                        @suggestion
                    </li>
                }
            </ul>
        }

        @if (selectedKeywords.Any())
        {
            <div class="mt-2">
                @foreach (var k in selectedKeywords)
                {
                    <span class="badge bg-primary me-1">
                        @k <button type="button" class="btn-close btn-close-white btn-sm ms-1" @onclick="() => RemoveKeyword(k)"></button>
                    </span>
                }
            </div>
        }
    </div>

    <button class="btn btn-success" type="submit">Guardar</button>
</EditForm>


@code {
    [Parameter] public int Id { get; set; }

    private UpdateArticleDto form = new();
    private string keywordInput = "";
    private List<string> keywordSuggestions = new();
    private List<string> selectedKeywords = new();
    private CancellationTokenSource? debounceCts;

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            var existing = await ArticleService.GetByIdAsync(Id);
            if (existing is not null)
            {
                form.Id = Id;
                form.Title = existing.Title;
                form.Description = existing.Description;
                form.CreatedByUser = existing.CreatedByUser;
                selectedKeywords = existing.Keywords ?? new();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initTinyMCE", "#editor");
        }
    }

    private async Task OnKeywordInput(ChangeEventArgs e)
    {
        keywordInput = e.Value?.ToString() ?? "";
        debounceCts?.Cancel();
        debounceCts = new CancellationTokenSource();

        try
        {
            await Task.Delay(300, debounceCts.Token);
            await SearchKeywordAsync();
        }
        catch (TaskCanceledException) { }
    }

    private async Task SearchKeywordAsync()
    {
        if (string.IsNullOrWhiteSpace(keywordInput)) return;

        try
        {
            var response = await Http.GetAsync($"api/Keyword/GetByName/{Uri.EscapeDataString(keywordInput)}");

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<List<string>>();
                keywordSuggestions = result?
                    .Where(k => !selectedKeywords.Contains(k, StringComparer.OrdinalIgnoreCase))
                    .ToList() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Keyword] Error buscando sugerencias: {ex.Message}");
        }
    }

    private void AddKeyword(string keyword)
    {
        if (!selectedKeywords.Contains(keyword, StringComparer.OrdinalIgnoreCase))
        {
            selectedKeywords.Add(keyword);
        }
        keywordInput = "";
        keywordSuggestions.Clear();
    }

    private void RemoveKeyword(string keyword)
    {
        selectedKeywords.Remove(keyword);
    }

    private async Task HandleSubmit()
    {
        try
        {
            Console.WriteLine("Entré al handle");
            // ✅ Obtener el contenido actual del editor TinyMCE
            form.Description = await JS.InvokeAsync<string>("getTinyMCEContent", "editor");
            Console.WriteLine("pase el JS.InvokeVoidAsync");
            if (Id == 0)
            {
                await ArticleService.CreateAsync(new CreateArticleDto
                {
                    Title = form.Title,
                    Description = form.Description,
                    CreatedByUser = form.CreatedByUser,
                    Keywords = selectedKeywords
                });
            }
            else
            {
                form.Keywords = selectedKeywords;
                Console.WriteLine("Entre al else");
                Console.WriteLine($"Contenido final: {form.Description}");
                await ArticleService.UpdateAsync(form);
                Console.WriteLine("Mandé la data al backend");
            }

            Nav.NavigateTo("/articles", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Guardar Error] {ex.Message}");
        }
    }
}
